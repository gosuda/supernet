syntax = "proto3";

package maddr;

option go_package = "gosuda.org/supernet/proto/maddr/v1alpha1;maddr";

enum Protocol {
  PROTOCOL_UNSPECIFIED = 0;

  PROTOCOL_IP4 = 1; // IPv4 address, e.g., "1.1.1.1"
  PROTOCOL_IP6 = 2; // IPv6 address, e.g., "2606:4700:4700::1111"
  PROTOCOL_DNS4 = 3; // DNS address, e.g., "example.com"
  PROTOCOL_DNS6 = 4; // DNS address with IPv6, e.g., "example.com"

  PROTOCOL_TCP = 5; // TCP protocol and port, e.g., "7496"
  PROTOCOL_UDP = 6; // UDP protocol and port, e.g., "7496"
  PROTOCOL_QUIC = 7; // QUIC protocol and port, e.g., "7496" with optional associated Certificate Fingerprint

  PROTOCOL_HTTP = 8; // HTTP protocol, with streaming support
  PROTOCOL_GRPC = 9; // gRPC protocol, with streaming support
  PROTOCOL_WEBRTC = 10; // WebRTC Data Channel Transport
  PROTOCOL_WEBSOCKET = 11; // WebSocket protocol, with streaming support
  PROTOCOL_WEBTRANSPORT = 12; // WebTransport protocol, with streaming support

  PROTOCOL_BLE = 20; // Bluetooth Low Energy protocol WIP
  PROTOCOL_UWB = 21; // Ultra-Wideband protocol WIP
  PROTOCOL_LORA = 22; // LoRA protocol WIP
  PROTOCOL_ZWAVE = 23; // Z-Wave protocol WIP
  PROTOCOL_ZIGBEE = 24; // Zigbee protocol WIP

  PROTOCOL_SNRELAY = 30; // SuperNet Relay Protocol
}

message Address {
  Protocol protocol = 1; // Protocol type of the address
  bytes address = 2; // address data
  optional Address local = 3;
  optional bytes identifier = 4; // Unique identifier for the address
  optional bytes associated_data = 5; // Additional data associated with the address
}

message AddressList {
  repeated Address addresses = 1;
  repeated Protocol client_protocols = 2;
}
