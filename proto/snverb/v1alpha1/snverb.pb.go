// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: proto/snverb/v1alpha1/snverb.proto

package snverb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1alpha1 "gosuda.org/supernet/proto/maddr/v1alpha1"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SigningAlgorithm defines various cryptographic algorithms used for signatures, encryption, and hashing.
type SignatureAlgorithm int32

const (
	// ED25519 is the Ed25519 digital signature algorithm.
	SignatureAlgorithm_ED25519 SignatureAlgorithm = 0
	// ED448 is the Ed448 digital signature algorithm.
	SignatureAlgorithm_ED448 SignatureAlgorithm = 1
	// ECDSA_NIST_P256 is the ECDSA with NIST P-256 curve.
	SignatureAlgorithm_ECDSA_NIST_P256 SignatureAlgorithm = 2
	// ECDSA_NIST_P384 is the ECDSA with NIST P-384 curve.
	SignatureAlgorithm_ECDSA_NIST_P384 SignatureAlgorithm = 3
	// ECDSA_NIST_P521 is the ECDSA with NIST P-521 curve.
	SignatureAlgorithm_ECDSA_NIST_P521 SignatureAlgorithm = 4
	// MLDSA44 is the ML-DSA-44 digital signature algorithm (NIST PQC).
	SignatureAlgorithm_MLDSA44 SignatureAlgorithm = 5
	// MLDSA65 is the ML-DSA-65 digital signature algorithm (NIST PQC).
	SignatureAlgorithm_MLDSA65 SignatureAlgorithm = 6
	// MLDSA87 is the ML-DSA-87 digital signature algorithm (NIST PQC).
	SignatureAlgorithm_MLDSA87 SignatureAlgorithm = 7
)

// Enum value maps for SignatureAlgorithm.
var (
	SignatureAlgorithm_name = map[int32]string{
		0: "ED25519",
		1: "ED448",
		2: "ECDSA_NIST_P256",
		3: "ECDSA_NIST_P384",
		4: "ECDSA_NIST_P521",
		5: "MLDSA44",
		6: "MLDSA65",
		7: "MLDSA87",
	}
	SignatureAlgorithm_value = map[string]int32{
		"ED25519":         0,
		"ED448":           1,
		"ECDSA_NIST_P256": 2,
		"ECDSA_NIST_P384": 3,
		"ECDSA_NIST_P521": 4,
		"MLDSA44":         5,
		"MLDSA65":         6,
		"MLDSA87":         7,
	}
)

func (x SignatureAlgorithm) Enum() *SignatureAlgorithm {
	p := new(SignatureAlgorithm)
	*p = x
	return p
}

func (x SignatureAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[0].Descriptor()
}

func (SignatureAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[0]
}

func (x SignatureAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureAlgorithm.Descriptor instead.
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{0}
}

type DigestAlgorithm int32

const (
	// SHA256 is the SHA-256 digest algorithm.
	DigestAlgorithm_SHA256 DigestAlgorithm = 0
	// SHA384 is the SHA-384 digest algorithm.
	DigestAlgorithm_SHA384 DigestAlgorithm = 1
	// SHA512 is the SHA-512 digest algorithm.
	DigestAlgorithm_SHA512 DigestAlgorithm = 2
	// SHA3_256 is the SHA3-256 digest algorithm.
	DigestAlgorithm_SHA3_256 DigestAlgorithm = 3
	// SHA3_384 is the SHA3-384 digest algorithm.
	DigestAlgorithm_SHA3_384 DigestAlgorithm = 4
	// SHA3_512 is the SHA3-512 digest algorithm.
	DigestAlgorithm_SHA3_512 DigestAlgorithm = 5
	// BLAKE2B is the BLAKE2b digest algorithm.
	DigestAlgorithm_BLAKE2B DigestAlgorithm = 6
	// BLAKE3 is the BLAKE3 digest algorithm.
	DigestAlgorithm_BLAKE3 DigestAlgorithm = 7
)

// Enum value maps for DigestAlgorithm.
var (
	DigestAlgorithm_name = map[int32]string{
		0: "SHA256",
		1: "SHA384",
		2: "SHA512",
		3: "SHA3_256",
		4: "SHA3_384",
		5: "SHA3_512",
		6: "BLAKE2B",
		7: "BLAKE3",
	}
	DigestAlgorithm_value = map[string]int32{
		"SHA256":   0,
		"SHA384":   1,
		"SHA512":   2,
		"SHA3_256": 3,
		"SHA3_384": 4,
		"SHA3_512": 5,
		"BLAKE2B":  6,
		"BLAKE3":   7,
	}
)

func (x DigestAlgorithm) Enum() *DigestAlgorithm {
	p := new(DigestAlgorithm)
	*p = x
	return p
}

func (x DigestAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigestAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[1].Descriptor()
}

func (DigestAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[1]
}

func (x DigestAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigestAlgorithm.Descriptor instead.
func (DigestAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{1}
}

type KeyExchangeAlgorithm int32

const (
	// X25519 is the X25519 elliptic curve Diffie-Hellman key exchange.
	KeyExchangeAlgorithm_X25519 KeyExchangeAlgorithm = 0
	// X448 is the X448 elliptic curve Diffie-Hellman key exchange.
	KeyExchangeAlgorithm_X448 KeyExchangeAlgorithm = 1
	// ECDH_NIST_P256 is the ECDH with NIST P-256 curve.
	KeyExchangeAlgorithm_ECDH_NIST_P256 KeyExchangeAlgorithm = 2
	// ECDH_NIST_P384 is the ECDH with NIST P-384 curve.
	KeyExchangeAlgorithm_ECDH_NIST_P384 KeyExchangeAlgorithm = 3
	// ECDH_NIST_P521 is the ECDH with NIST P-521 curve.
	KeyExchangeAlgorithm_ECDH_NIST_P521 KeyExchangeAlgorithm = 4
	// MLKEM512 is the ML-KEM-512 key encapsulation mechanism (NIST PQC).
	KeyExchangeAlgorithm_MLKEM512 KeyExchangeAlgorithm = 5
	// MLKEM768 is the ML-KEM-768 key encapsulation mechanism (NIST PQC).
	KeyExchangeAlgorithm_MLKEM768 KeyExchangeAlgorithm = 6
	// MLKEM1024 is the ML-KEM-1024 key encapsulation mechanism (NIST PQC).
	KeyExchangeAlgorithm_MLKEM1024 KeyExchangeAlgorithm = 7
)

// Enum value maps for KeyExchangeAlgorithm.
var (
	KeyExchangeAlgorithm_name = map[int32]string{
		0: "X25519",
		1: "X448",
		2: "ECDH_NIST_P256",
		3: "ECDH_NIST_P384",
		4: "ECDH_NIST_P521",
		5: "MLKEM512",
		6: "MLKEM768",
		7: "MLKEM1024",
	}
	KeyExchangeAlgorithm_value = map[string]int32{
		"X25519":         0,
		"X448":           1,
		"ECDH_NIST_P256": 2,
		"ECDH_NIST_P384": 3,
		"ECDH_NIST_P521": 4,
		"MLKEM512":       5,
		"MLKEM768":       6,
		"MLKEM1024":      7,
	}
)

func (x KeyExchangeAlgorithm) Enum() *KeyExchangeAlgorithm {
	p := new(KeyExchangeAlgorithm)
	*p = x
	return p
}

func (x KeyExchangeAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyExchangeAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[2].Descriptor()
}

func (KeyExchangeAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[2]
}

func (x KeyExchangeAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyExchangeAlgorithm.Descriptor instead.
func (KeyExchangeAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{2}
}

type EncryptionAlgorithm int32

const (
	// AES128_GCM is the Advanced Encryption Standard with 128-bit key in Galois/Counter Mode.
	EncryptionAlgorithm_AES128_GCM EncryptionAlgorithm = 0
	// AES256_GCM is the Advanced Encryption Standard with 256-bit key in Galois/Counter Mode.
	EncryptionAlgorithm_AES256_GCM EncryptionAlgorithm = 1
	// CHACHA20_POLY1305 is the ChaCha20-Poly1305 authenticated encryption algorithm.
	EncryptionAlgorithm_CHACHA20_POLY1305 EncryptionAlgorithm = 2
	// XCHACHA20_POLY1305 is the XChaCha20-Poly1305 authenticated encryption algorithm.
	EncryptionAlgorithm_XCHACHA20_POLY1305 EncryptionAlgorithm = 3
)

// Enum value maps for EncryptionAlgorithm.
var (
	EncryptionAlgorithm_name = map[int32]string{
		0: "AES128_GCM",
		1: "AES256_GCM",
		2: "CHACHA20_POLY1305",
		3: "XCHACHA20_POLY1305",
	}
	EncryptionAlgorithm_value = map[string]int32{
		"AES128_GCM":         0,
		"AES256_GCM":         1,
		"CHACHA20_POLY1305":  2,
		"XCHACHA20_POLY1305": 3,
	}
)

func (x EncryptionAlgorithm) Enum() *EncryptionAlgorithm {
	p := new(EncryptionAlgorithm)
	*p = x
	return p
}

func (x EncryptionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[3].Descriptor()
}

func (EncryptionAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[3]
}

func (x EncryptionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionAlgorithm.Descriptor instead.
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{3}
}

// RouterClass enumerates the types of router nodes in the network, indicating their level of functionality and resource requirements.
type RouterClass int32

const (
	RouterClass_FULL_NODE RouterClass = 0 // Full-featured router with complete networking capabilities.
	RouterClass_MINI_NODE RouterClass = 1 // Lightweight router with reduced functionality for smaller scale use.
	RouterClass_NANO_NODE RouterClass = 2 // Minimal router optimized for ultra-low resource environments.
)

// Enum value maps for RouterClass.
var (
	RouterClass_name = map[int32]string{
		0: "FULL_NODE",
		1: "MINI_NODE",
		2: "NANO_NODE",
	}
	RouterClass_value = map[string]int32{
		"FULL_NODE": 0,
		"MINI_NODE": 1,
		"NANO_NODE": 2,
	}
)

func (x RouterClass) Enum() *RouterClass {
	p := new(RouterClass)
	*p = x
	return p
}

func (x RouterClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterClass) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[4].Descriptor()
}

func (RouterClass) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[4]
}

func (x RouterClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterClass.Descriptor instead.
func (RouterClass) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{4}
}

// RouterFeature lists the optional features that a router can support, influencing its role and capabilities in the network.
type RouterFeature int32

const (
	RouterFeature_EXCHANGE RouterFeature = 0 // Supports key exchange operations for secure communication establishment.
	RouterFeature_LEASE    RouterFeature = 1 // Provides address leasing services for dynamic network allocation.
	RouterFeature_RELAY    RouterFeature = 2 // Acts as a relay for forwarding packets through the network.
)

// Enum value maps for RouterFeature.
var (
	RouterFeature_name = map[int32]string{
		0: "EXCHANGE",
		1: "LEASE",
		2: "RELAY",
	}
	RouterFeature_value = map[string]int32{
		"EXCHANGE": 0,
		"LEASE":    1,
		"RELAY":    2,
	}
)

func (x RouterFeature) Enum() *RouterFeature {
	p := new(RouterFeature)
	*p = x
	return p
}

func (x RouterFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_snverb_v1alpha1_snverb_proto_enumTypes[5].Descriptor()
}

func (RouterFeature) Type() protoreflect.EnumType {
	return &file_proto_snverb_v1alpha1_snverb_proto_enumTypes[5]
}

func (x RouterFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterFeature.Descriptor instead.
func (RouterFeature) EnumDescriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{5}
}

// IdentityKey represents a cryptographic public key with its unique identifier and the signature algorithm used.
type IdentityKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyId         uint64                 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 64-bit key id
	Algorithm     SignatureAlgorithm     `protobuf:"varint,2,opt,name=algorithm,proto3,enum=snverb.SignatureAlgorithm" json:"algorithm,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityKey) Reset() {
	*x = IdentityKey{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityKey) ProtoMessage() {}

func (x *IdentityKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityKey.ProtoReflect.Descriptor instead.
func (*IdentityKey) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityKey) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *IdentityKey) GetAlgorithm() SignatureAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return SignatureAlgorithm_ED25519
}

func (x *IdentityKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Identity encapsulates a collection of public keys associated with an entity for authentication and verification purposes.
type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKeys    []*IdentityKey         `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{1}
}

func (x *Identity) GetPublicKeys() []*IdentityKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

// Signature contains the signature bytes along with the key ID, signature algorithm, and digest algorithm used for verification.
type Signature struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KeyId           uint64                 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // 64-bit key id
	Algorithm       SignatureAlgorithm     `protobuf:"varint,2,opt,name=algorithm,proto3,enum=snverb.SignatureAlgorithm" json:"algorithm,omitempty"`
	DigestAlgorithm DigestAlgorithm        `protobuf:"varint,3,opt,name=digest_algorithm,json=digestAlgorithm,proto3,enum=snverb.DigestAlgorithm" json:"digest_algorithm,omitempty"`
	Signature       []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{2}
}

func (x *Signature) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *Signature) GetAlgorithm() SignatureAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return SignatureAlgorithm_ED25519
}

func (x *Signature) GetDigestAlgorithm() DigestAlgorithm {
	if x != nil {
		return x.DigestAlgorithm
	}
	return DigestAlgorithm_SHA256
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MultiSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signatures    []*Signature           `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiSignature) Reset() {
	*x = MultiSignature{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSignature) ProtoMessage() {}

func (x *MultiSignature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSignature.ProtoReflect.Descriptor instead.
func (*MultiSignature) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{3}
}

func (x *MultiSignature) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// RouterInfo provides metadata about a router node, including its identity, network addresses, classification, and supported features.
type RouterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouterId      []byte                 `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`                                   // 128-bit router id
	Identity      *Identity              `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`                                                   // Identity containing the public keys for this router.
	Version       int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                                    // Version number of the router information for compatibility checking.
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                // Timestamp of the router information.
	AddressList   *v1alpha1.AddressList  `protobuf:"bytes,5,opt,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`                          // List of network addresses where this router can be reached.
	RouterClass   RouterClass            `protobuf:"varint,6,opt,name=router_class,json=routerClass,proto3,enum=snverb.RouterClass" json:"router_class,omitempty"` // Classification of the router determining its capabilities.
	Features      []RouterFeature        `protobuf:"varint,7,rep,packed,name=features,proto3,enum=snverb.RouterFeature" json:"features,omitempty"`                 // List of features supported by this router node.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouterInfo) Reset() {
	*x = RouterInfo{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterInfo) ProtoMessage() {}

func (x *RouterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterInfo.ProtoReflect.Descriptor instead.
func (*RouterInfo) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{4}
}

func (x *RouterInfo) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *RouterInfo) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *RouterInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RouterInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouterInfo) GetAddressList() *v1alpha1.AddressList {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *RouterInfo) GetRouterClass() RouterClass {
	if x != nil {
		return x.RouterClass
	}
	return RouterClass_FULL_NODE
}

func (x *RouterInfo) GetFeatures() []RouterFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

// SignedRouterInfo is a RouterInfo message signed by the router's identity.
type SignedRouterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouterInfo    []byte                 `protobuf:"bytes,1,opt,name=router_info,json=routerInfo,proto3" json:"router_info,omitempty"` // RouterInfo message serialized to bytes.
	Signature     *MultiSignature        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`                     // MultiSignature of the RouterInfo message. (policy: any)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedRouterInfo) Reset() {
	*x = SignedRouterInfo{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedRouterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedRouterInfo) ProtoMessage() {}

func (x *SignedRouterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedRouterInfo.ProtoReflect.Descriptor instead.
func (*SignedRouterInfo) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{5}
}

func (x *SignedRouterInfo) GetRouterInfo() []byte {
	if x != nil {
		return x.RouterInfo
	}
	return nil
}

func (x *SignedRouterInfo) GetSignature() *MultiSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// DropZone is a logical home for a virtual address.
type DropZone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouterId      []byte                 `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"` // 128-bit router id
	TunnelId      []byte                 `protobuf:"bytes,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"` // 128-bit tunnel id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropZone) Reset() {
	*x = DropZone{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropZone) ProtoMessage() {}

func (x *DropZone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropZone.ProtoReflect.Descriptor instead.
func (*DropZone) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{6}
}

func (x *DropZone) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *DropZone) GetTunnelId() []byte {
	if x != nil {
		return x.TunnelId
	}
	return nil
}

// DropZoneSet is a set of dropzones for a virtual address.
type DropZoneSet struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VirtualAddress []byte                 `protobuf:"bytes,1,opt,name=virtual_address,json=virtualAddress,proto3" json:"virtual_address,omitempty"` // 128-bit virtual address
	Identity       *Identity              `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`                                   // Identity of the virtual address
	Timestamp      int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                // Timestamp of the dropzone set
	Dropzones      []*DropZone            `protobuf:"bytes,4,rep,name=dropzones,proto3" json:"dropzones,omitempty"`                                 // List of dropzones for the virtual address
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DropZoneSet) Reset() {
	*x = DropZoneSet{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropZoneSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropZoneSet) ProtoMessage() {}

func (x *DropZoneSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropZoneSet.ProtoReflect.Descriptor instead.
func (*DropZoneSet) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{7}
}

func (x *DropZoneSet) GetVirtualAddress() []byte {
	if x != nil {
		return x.VirtualAddress
	}
	return nil
}

func (x *DropZoneSet) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DropZoneSet) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DropZoneSet) GetDropzones() []*DropZone {
	if x != nil {
		return x.Dropzones
	}
	return nil
}

// SignedDropZoneSet is a DropZoneSet message signed by the router's identity.
type SignedDropZoneSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DropzoneSet   []byte                 `protobuf:"bytes,1,opt,name=dropzone_set,json=dropzoneSet,proto3" json:"dropzone_set,omitempty"` // DropZoneSet message serialized to bytes.
	Signature     *MultiSignature        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`                        // MultiSignature of the DropZoneSet message. (policy: any)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedDropZoneSet) Reset() {
	*x = SignedDropZoneSet{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedDropZoneSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedDropZoneSet) ProtoMessage() {}

func (x *SignedDropZoneSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedDropZoneSet.ProtoReflect.Descriptor instead.
func (*SignedDropZoneSet) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{8}
}

func (x *SignedDropZoneSet) GetDropzoneSet() []byte {
	if x != nil {
		return x.DropzoneSet
	}
	return nil
}

func (x *SignedDropZoneSet) GetSignature() *MultiSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// TunnelDescriptor represents a tunnel between two endpoints, including the tunnel ID, destination, and source.
type TunnelDescriptor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      []byte                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"` // 128-bit tunnel id
	Destination   []byte                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`           // 128-bit destination id
	Source        []byte                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`                     // 128-bit source id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelDescriptor) Reset() {
	*x = TunnelDescriptor{}
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelDescriptor) ProtoMessage() {}

func (x *TunnelDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snverb_v1alpha1_snverb_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelDescriptor.ProtoReflect.Descriptor instead.
func (*TunnelDescriptor) Descriptor() ([]byte, []int) {
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP(), []int{9}
}

func (x *TunnelDescriptor) GetTunnelId() []byte {
	if x != nil {
		return x.TunnelId
	}
	return nil
}

func (x *TunnelDescriptor) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TunnelDescriptor) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

var File_proto_snverb_v1alpha1_snverb_proto protoreflect.FileDescriptor

const file_proto_snverb_v1alpha1_snverb_proto_rawDesc = "" +
	"\n" +
	"\"proto/snverb/v1alpha1/snverb.proto\x12\x06snverb\x1a proto/maddr/v1alpha1/maddr.proto\"}\n" +
	"\vIdentityKey\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\x04R\x05keyId\x128\n" +
	"\talgorithm\x18\x02 \x01(\x0e2\x1a.snverb.SignatureAlgorithmR\talgorithm\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\fR\tpublicKey\"@\n" +
	"\bIdentity\x124\n" +
	"\vpublic_keys\x18\x01 \x03(\v2\x13.snverb.IdentityKeyR\n" +
	"publicKeys\"\xbe\x01\n" +
	"\tSignature\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\x04R\x05keyId\x128\n" +
	"\talgorithm\x18\x02 \x01(\x0e2\x1a.snverb.SignatureAlgorithmR\talgorithm\x12B\n" +
	"\x10digest_algorithm\x18\x03 \x01(\x0e2\x17.snverb.DigestAlgorithmR\x0fdigestAlgorithm\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"C\n" +
	"\x0eMultiSignature\x121\n" +
	"\n" +
	"signatures\x18\x01 \x03(\v2\x11.snverb.SignatureR\n" +
	"signatures\"\xb1\x02\n" +
	"\n" +
	"RouterInfo\x12\x1b\n" +
	"\trouter_id\x18\x01 \x01(\fR\brouterId\x12,\n" +
	"\bidentity\x18\x02 \x01(\v2\x10.snverb.IdentityR\bidentity\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x03R\aversion\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x125\n" +
	"\faddress_list\x18\x05 \x01(\v2\x12.maddr.AddressListR\vaddressList\x126\n" +
	"\frouter_class\x18\x06 \x01(\x0e2\x13.snverb.RouterClassR\vrouterClass\x121\n" +
	"\bfeatures\x18\a \x03(\x0e2\x15.snverb.RouterFeatureR\bfeatures\"i\n" +
	"\x10SignedRouterInfo\x12\x1f\n" +
	"\vrouter_info\x18\x01 \x01(\fR\n" +
	"routerInfo\x124\n" +
	"\tsignature\x18\x02 \x01(\v2\x16.snverb.MultiSignatureR\tsignature\"D\n" +
	"\bDropZone\x12\x1b\n" +
	"\trouter_id\x18\x01 \x01(\fR\brouterId\x12\x1b\n" +
	"\ttunnel_id\x18\x02 \x01(\fR\btunnelId\"\xb2\x01\n" +
	"\vDropZoneSet\x12'\n" +
	"\x0fvirtual_address\x18\x01 \x01(\fR\x0evirtualAddress\x12,\n" +
	"\bidentity\x18\x02 \x01(\v2\x10.snverb.IdentityR\bidentity\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12.\n" +
	"\tdropzones\x18\x04 \x03(\v2\x10.snverb.DropZoneR\tdropzones\"l\n" +
	"\x11SignedDropZoneSet\x12!\n" +
	"\fdropzone_set\x18\x01 \x01(\fR\vdropzoneSet\x124\n" +
	"\tsignature\x18\x02 \x01(\v2\x16.snverb.MultiSignatureR\tsignature\"i\n" +
	"\x10TunnelDescriptor\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\fR\btunnelId\x12 \n" +
	"\vdestination\x18\x02 \x01(\fR\vdestination\x12\x16\n" +
	"\x06source\x18\x03 \x01(\fR\x06source*\x92\x01\n" +
	"\x12SignatureAlgorithm\x12\v\n" +
	"\aED25519\x10\x00\x12\t\n" +
	"\x05ED448\x10\x01\x12\x13\n" +
	"\x0fECDSA_NIST_P256\x10\x02\x12\x13\n" +
	"\x0fECDSA_NIST_P384\x10\x03\x12\x13\n" +
	"\x0fECDSA_NIST_P521\x10\x04\x12\v\n" +
	"\aMLDSA44\x10\x05\x12\v\n" +
	"\aMLDSA65\x10\x06\x12\v\n" +
	"\aMLDSA87\x10\a*x\n" +
	"\x0fDigestAlgorithm\x12\n" +
	"\n" +
	"\x06SHA256\x10\x00\x12\n" +
	"\n" +
	"\x06SHA384\x10\x01\x12\n" +
	"\n" +
	"\x06SHA512\x10\x02\x12\f\n" +
	"\bSHA3_256\x10\x03\x12\f\n" +
	"\bSHA3_384\x10\x04\x12\f\n" +
	"\bSHA3_512\x10\x05\x12\v\n" +
	"\aBLAKE2B\x10\x06\x12\n" +
	"\n" +
	"\x06BLAKE3\x10\a*\x93\x01\n" +
	"\x14KeyExchangeAlgorithm\x12\n" +
	"\n" +
	"\x06X25519\x10\x00\x12\b\n" +
	"\x04X448\x10\x01\x12\x12\n" +
	"\x0eECDH_NIST_P256\x10\x02\x12\x12\n" +
	"\x0eECDH_NIST_P384\x10\x03\x12\x12\n" +
	"\x0eECDH_NIST_P521\x10\x04\x12\f\n" +
	"\bMLKEM512\x10\x05\x12\f\n" +
	"\bMLKEM768\x10\x06\x12\r\n" +
	"\tMLKEM1024\x10\a*d\n" +
	"\x13EncryptionAlgorithm\x12\x0e\n" +
	"\n" +
	"AES128_GCM\x10\x00\x12\x0e\n" +
	"\n" +
	"AES256_GCM\x10\x01\x12\x15\n" +
	"\x11CHACHA20_POLY1305\x10\x02\x12\x16\n" +
	"\x12XCHACHA20_POLY1305\x10\x03*:\n" +
	"\vRouterClass\x12\r\n" +
	"\tFULL_NODE\x10\x00\x12\r\n" +
	"\tMINI_NODE\x10\x01\x12\r\n" +
	"\tNANO_NODE\x10\x02*3\n" +
	"\rRouterFeature\x12\f\n" +
	"\bEXCHANGE\x10\x00\x12\t\n" +
	"\x05LEASE\x10\x01\x12\t\n" +
	"\x05RELAY\x10\x02B\x83\x01\n" +
	"\n" +
	"com.snverbB\vSnverbProtoP\x01Z0gosuda.org/supernet/proto/snverb/v1alpha1;snverb\xa2\x02\x03SXX\xaa\x02\x06Snverb\xca\x02\x06Snverb\xe2\x02\x12Snverb\\GPBMetadata\xea\x02\x06Snverbb\x06proto3"

var (
	file_proto_snverb_v1alpha1_snverb_proto_rawDescOnce sync.Once
	file_proto_snverb_v1alpha1_snverb_proto_rawDescData []byte
)

func file_proto_snverb_v1alpha1_snverb_proto_rawDescGZIP() []byte {
	file_proto_snverb_v1alpha1_snverb_proto_rawDescOnce.Do(func() {
		file_proto_snverb_v1alpha1_snverb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_snverb_v1alpha1_snverb_proto_rawDesc), len(file_proto_snverb_v1alpha1_snverb_proto_rawDesc)))
	})
	return file_proto_snverb_v1alpha1_snverb_proto_rawDescData
}

var file_proto_snverb_v1alpha1_snverb_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_snverb_v1alpha1_snverb_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_snverb_v1alpha1_snverb_proto_goTypes = []any{
	(SignatureAlgorithm)(0),      // 0: snverb.SignatureAlgorithm
	(DigestAlgorithm)(0),         // 1: snverb.DigestAlgorithm
	(KeyExchangeAlgorithm)(0),    // 2: snverb.KeyExchangeAlgorithm
	(EncryptionAlgorithm)(0),     // 3: snverb.EncryptionAlgorithm
	(RouterClass)(0),             // 4: snverb.RouterClass
	(RouterFeature)(0),           // 5: snverb.RouterFeature
	(*IdentityKey)(nil),          // 6: snverb.IdentityKey
	(*Identity)(nil),             // 7: snverb.Identity
	(*Signature)(nil),            // 8: snverb.Signature
	(*MultiSignature)(nil),       // 9: snverb.MultiSignature
	(*RouterInfo)(nil),           // 10: snverb.RouterInfo
	(*SignedRouterInfo)(nil),     // 11: snverb.SignedRouterInfo
	(*DropZone)(nil),             // 12: snverb.DropZone
	(*DropZoneSet)(nil),          // 13: snverb.DropZoneSet
	(*SignedDropZoneSet)(nil),    // 14: snverb.SignedDropZoneSet
	(*TunnelDescriptor)(nil),     // 15: snverb.TunnelDescriptor
	(*v1alpha1.AddressList)(nil), // 16: maddr.AddressList
}
var file_proto_snverb_v1alpha1_snverb_proto_depIdxs = []int32{
	0,  // 0: snverb.IdentityKey.algorithm:type_name -> snverb.SignatureAlgorithm
	6,  // 1: snverb.Identity.public_keys:type_name -> snverb.IdentityKey
	0,  // 2: snverb.Signature.algorithm:type_name -> snverb.SignatureAlgorithm
	1,  // 3: snverb.Signature.digest_algorithm:type_name -> snverb.DigestAlgorithm
	8,  // 4: snverb.MultiSignature.signatures:type_name -> snverb.Signature
	7,  // 5: snverb.RouterInfo.identity:type_name -> snverb.Identity
	16, // 6: snverb.RouterInfo.address_list:type_name -> maddr.AddressList
	4,  // 7: snverb.RouterInfo.router_class:type_name -> snverb.RouterClass
	5,  // 8: snverb.RouterInfo.features:type_name -> snverb.RouterFeature
	9,  // 9: snverb.SignedRouterInfo.signature:type_name -> snverb.MultiSignature
	7,  // 10: snverb.DropZoneSet.identity:type_name -> snverb.Identity
	12, // 11: snverb.DropZoneSet.dropzones:type_name -> snverb.DropZone
	9,  // 12: snverb.SignedDropZoneSet.signature:type_name -> snverb.MultiSignature
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_snverb_v1alpha1_snverb_proto_init() }
func file_proto_snverb_v1alpha1_snverb_proto_init() {
	if File_proto_snverb_v1alpha1_snverb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_snverb_v1alpha1_snverb_proto_rawDesc), len(file_proto_snverb_v1alpha1_snverb_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_snverb_v1alpha1_snverb_proto_goTypes,
		DependencyIndexes: file_proto_snverb_v1alpha1_snverb_proto_depIdxs,
		EnumInfos:         file_proto_snverb_v1alpha1_snverb_proto_enumTypes,
		MessageInfos:      file_proto_snverb_v1alpha1_snverb_proto_msgTypes,
	}.Build()
	File_proto_snverb_v1alpha1_snverb_proto = out.File
	file_proto_snverb_v1alpha1_snverb_proto_goTypes = nil
	file_proto_snverb_v1alpha1_snverb_proto_depIdxs = nil
}
